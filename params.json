{"tagline":"Expect::your($test)->not->toSuck();","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"php-expect","body":"# Expect::your($test)->not->toSuck();\r\n\r\n## Matching that doesn't suck ... mostly\r\n\r\nIt is very easy to create a matcher using php-expect. Just put it in the Expect::$matchers static array. Here's how.\r\n\r\n#### Matcher skeleton\r\n```php\r\nExpect::$matchers['matcher'] = function($actual, $expected) {\r\n    return array(\r\n        $positive_matcher = function() use ($actual, $expected) {\r\n\r\n        }, \"What to say when the positive matcher fails\",\r\n\r\n        $negative_matcher = function() use ($actual, $expected) {\r\n\r\n        }, \"What to say when the negative matcher fails\"\r\n    );\r\n}\r\n```\r\n\r\nOf course, you don't need to write _$positive_matcher =_ or _$negative_matcher =_, but it helps add context.\r\n\r\n#### The _toSuck_ matcher:\r\n```php\r\nExpect::$matchers['toSuck'] = function ($actual, $expected) {\r\n    $class = get_class($actual);\r\n    return array(\r\n        $positive_matcher = function () use ($class) {\r\n            assert( $class == 'Suck' );\r\n        }, \"Expected object to suck\",\r\n\r\n        $negative_matcher = function () use ($class) {\r\n            assert( $class != 'Suck' );\r\n        }, \"Expected object not to suck\"\r\n    );\r\n};\r\n```","google":"UA-34438265-1"}